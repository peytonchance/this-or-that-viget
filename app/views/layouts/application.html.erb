<!DOCTYPE html>
<html>
  <head>
    <title>This or That</title>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <!-- Facebook Open Graph Tags -->
    <meta property="og:url"                content="http://this-or-that.co/" />
    <meta property="og:title"              content="This or That" />
    <meta property="og:description"        content="This or That makes it easy to decide whether to get sushi or go to that taco place down the street, by taking the actual deciding off your hands. Vote on choices that everyday people around you are considering, or create your own and wait for the world tell you what to do." />
    <meta property="og:image"              content="https://s3.amazonaws.com/vigesharing-is-vigecaring/awavering/homePage.png" />
    <!-- End Facebook Open Graph Tags -->

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Google Tag Manager -->
    <script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
    'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-T6X89Q6');</script>
    <!-- End Google Tag Manager -->

    <%= favicon_link_tag asset_path('favicon.png'), :rel => 'icon', :type =>  'image/png' %>

    <%= stylesheet_link_tag    'application', media: 'all' %>
  </head>

  <body>
    <!-- Google Tag Manager (noscript) -->
    <noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-T6X89Q6" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
    <!-- End Google Tag Manager (noscript) -->

    <style>
    canvas[resize].canvas-feed {
      max-height: 220px;
      width: 100%;
      height: 100%;
    }

    .canvas__wrapper {
      <% if params[:filter] == 'mypolls' %>
        background: #fcb92c;
      <% elsif params[:filter] == 'following' %>
        background: #144b71;
      <% else %>
        background: #61b7f2;
      <% end %>
      max-height: 200px;
      opacity: 0;
      padding-bottom: 0;
      position: absolute;
      top: 0;
      transition: opacity 0.5s;
      width: 100%;
      z-index: 0;
    }
    </style>

    <div class="canvas__wrapper">
      <canvas id="canvas" class="canvas-feed" resize hidpi="off"></canvas>
    </div>

    <div class="body__main">
      <%= render partial: 'shared/header' %>

      <%= yield %>

      <%= render partial: 'shared/footer' %>
    </div>
    <% if !user_signed_in? %>
      <%= render partial: 'shared/signup' %>
      <%= render partial: 'shared/login' %>
    <% else %>
      <%= render partial: 'shared/create' %>
    <% end %>

    <% if @show_tutorial %>
      <%= render partial: 'shared/tutorial' %>
    <% end %>

    <%= render partial: 'shared/forgot-password' %>

    <%= javascript_include_tag 'application' %>
    <script type="text/paperscript" canvas="canvas">
        // Code ported to Paper.js from http://the389.com/9/1/
        // with permission.

        var values = {
            friction: 0.8,
            timeStep: 0.8,
            amount: 15,
            mass: 2,
            count: 0
        };
        values.invMass = 1 / values.mass;

        var path, springs;
        var size = view.size * [1.2, 1];

        var Spring = function(a, b, strength, restLength) {
            this.a = a;
            this.b = b;
            this.restLength = restLength || 80;
            this.strength = strength ? strength : 0.55;
            this.mamb = values.invMass * values.invMass;
        };

        Spring.prototype.update = function() {
            var delta = this.b - this.a;
            var dist = delta.length;
            var normDistStrength = (dist - this.restLength) /
                    (dist * this.mamb) * this.strength;
            delta.y *= normDistStrength * values.invMass * 0.2;
            if (!this.a.fixed)
                this.a.y += delta.y;
            if (!this.b.fixed)
                this.b.y -= delta.y;
        };


        function createPath(strength) {
            var path = new Path({
                fillColor: 'white'
            });

            path.rotate(40);
            springs = [];
            for (var i = 0; i <= values.amount; i++) {
                var segment = path.add(new Point(i / values.amount, 0.5) * size);
                var point = segment.point;
                if (i == 0 || i == values.amount)
                    point.y += size.height;
                point.px = point.x;
                point.py = point.y;
                // The first two and last two points are fixed:
                point.fixed = i < 2 || i > values.amount - 2;
                if (i > 0) {
                    var spring = new Spring(segment.previous.point, point, strength);
                    springs.push(spring);
                }
            }
            path.position.x -= size.width / 4;
            return path;
        }

        function onResize() {
            if (path)
                path.remove();
            size = view.bounds.size * [2, 1];
            path = createPath(0.1);
        }

        function onMouseMove(event) {
            var location = path.getNearestLocation(event.point);
            var segment = location.segment;
            var point = segment.point;

            if (!point.fixed && location.distance < size.height / 4) {
                var y = event.point.y;
                point.y += (y - point.y) / 6;
                var previous = segment.previous && segment.previous.point;
                var next = segment.next && segment.next.point;
                if (previous && !previous.fixed)
                    previous.y += (y - previous.y) / 24;
                if (next && !next.fixed)
                    next.y += (y - next.y) / 24;
            }
        }

        function onFrame(event) {
            updateWave(path);
        }

        function updateWave(path) {
            var force = 1 - values.friction * values.timeStep * values.timeStep;
            for (var i = 0, l = path.segments.length; i < l; i++) {
                var point = path.segments[i].point;
                var dy = (point.y - point.py) * force;
                point.py = point.y;
                point.y = Math.max(point.y + dy, 0);
            }

            for (var j = 0, l = springs.length; j < l; j++) {
                springs[j].update();
            }
            path.smooth({ type: 'continuous' });
        }

        function onKeyDown(event) {
            if (event.key == 'space') {
                path.fullySelected = !path.fullySelected;
                path.fillColor = path.fullySelected ? null : 'black';
            }
        }
    </script>
    <script>
      setTimeout(() => {
      document.querySelector('.canvas__wrapper').style = 'opacity: 1;'
    }, 500)</script>
    <%= javascript_pack_tag 'application' %>
  </body>
</html>
